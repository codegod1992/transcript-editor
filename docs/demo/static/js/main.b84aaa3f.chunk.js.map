{"version":3,"sources":["lib/TranscriptEditor/TimedTextEditor/TimedTextEditor.module.css","lib/TranscriptEditor/TimedTextEditor/TimedTextEditor.js","lib/TranscriptEditor/MediaController/MediaPreview/MediaPreview.js","lib/TranscriptEditor/MediaController/ProgressBar/ProgressBar.js","lib/TranscriptEditor/MediaController/PlayerControls/PlayerControls.js","lib/TranscriptEditor/MediaController/MediaController.js","lib/TranscriptEditor/TranscriptEditor.js","index.js","lib/TranscriptEditor/TimedTextEditor/adapters/bbc-kaldi/index.js","lib/TranscriptEditor/MediaController/MediaPreview/MediaPreview.module.css"],"names":["module","exports","test","TimedTextEditor","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","editorState","EditorState","createEmpty","transcriptData","loadData","blocks","bbcKaldiToDraft","contentState","convertFromRaw","entityMap","createWithContent","setState","react_default","a","createElement","Draft","onChange","React","Component","MediaPreview","videoRef","createRef","className","styles","videoSection","id","playsInline","controls","src","mediaUrl","type","data-testid","ref","ProgressBar","PlayerControls","MediaController","MediaController_ProgressBar_ProgressBar","MediaController_MediaPreview_MediaPreview","MediaController_PlayerControls_PlayerControls","TranscriptEditor","TranscriptEditor_MediaController_MediaController","TranscriptEditor_TimedTextEditor_TimedTextEditor","render","style","width","margin","lib_TranscriptEditor_TranscriptEditor","kaldiTedTalkTranscript","document","getElementById","bbcKaldiJson","results","words","paragraph","text","forEach","word","punct","push","groupWordsInParagraphs","retval","draftJsContentBlockParagraph","join","data","speaker","entityRanges"],"mappings":"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","file":"static/js/main.b84aaa3f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"test\":\"TimedTextEditor_test__484NC\"};","import React from 'react';\nimport \n// Draft,\n    {\n    Editor,\n    EditorState,\n    // ContentState,\n    convertFromRaw,\n  } from 'draft-js';\n\nimport styles from './TimedTextEditor.module.css';\n\nimport bbcKaldiToDraft from './adapters/bbc-kaldi/index.js';\n\n\nclass TimedTextEditor extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editorState: EditorState.createEmpty(),\n            transcriptData: this.props.transcriptData\n        };\n    \n        // this.onChange = editorState => this.setState({ editorState });\n      \n    }\n    componentDidMount(){\n        this.loadData();\n    }\n    \n    loadData() {\n        // const blocks = [\n        // {\n        //     text: 'Hello',\n        //     type: 'paragraph',\n        //     data: {\n        //     speaker: 'Foo',\n        //     },\n        //     entityRanges: [],\n        // },\n        // {\n        //     text: 'World',\n        //     type: 'paragraph',\n        //     data: {\n        //     speaker: 'Bar',\n        //     },\n        //     entityRanges: [],\n        // },\n        // ];\n\n        let blocks = bbcKaldiToDraft(this.props.transcriptData);\n    \n        const entityMap = {};\n    \n        const contentState = convertFromRaw({ blocks, entityMap });\n        const editorState = EditorState.createWithContent(contentState);\n    \n        this.setState({ editorState });\n    }\n    \n    render() {\n        return (\n        <section>\n      \n            <Editor editorState={this.state.editorState} onChange={this.onChange} />\n            {/* <button onClick={() => this.loadData()}>load data</button> */}\n        </section>\n        );\n    }\n}\n\nexport default TimedTextEditor;\n","import React from 'react';\nimport styles from './MediaPreview.module.css';\n\n// inspired by https://github.com/bbc/nm2/blob/master/src/components/chapter/video/Video.jsx\n\nclass MediaPreview extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.videoRef = React.createRef();\n  }\n    render() {\n      return (\n        <section className={styles.videoSection}>\n         <h3>MediaPreview </h3>\n         <video\n            id=\"video\"\n            playsInline\n            // autoPlay\n            controls\n            src={this.props.mediaUrl}\n            type=\"video/mp4\"\n            data-testid=\"media-player-id\"\n            ref={this.videoRef}\n          />\n        </section>\n      );\n    }\n  }\n\nexport default MediaPreview;","import React from 'react';\n\nclass ProgressBar extends React.Component {\n    render() {\n      return <h3>ProgressBar</h3>;\n    }\n  }\n\nexport default ProgressBar;","import React from 'react';\n\nclass PlayerControls extends React.Component {\n    render() {\n      return <h3>PlayerControls</h3>;\n    }\n  }\n\nexport default PlayerControls;","import React from 'react';\n\nimport MediaPreview from \"./MediaPreview/MediaPreview\";\nimport ProgressBar from \"./ProgressBar/ProgressBar\";\nimport PlayerControls from \"./PlayerControls/PlayerControls\";\n\nclass MediaController extends React.Component {\n    render() {\n      return (\n          <div>\n            <h2>MediaController</h2>\n            <ProgressBar/>\n            <MediaPreview mediaUrl={this.props.mediaUrl}/>\n            <PlayerControls/>\n        </div>\n      );\n    }\n  }\n\nexport default MediaController;","import React from 'react';\nimport \"./TranscriptEditor.css\";\n\nimport TimedTextEditor from \"./TimedTextEditor/TimedTextEditor\";\nimport MediaController from \"./MediaController/MediaController\";\n\nclass TranscriptEditor extends React.Component {\n\n    render() {\n        return (\n            <div>\n                <h1>TranscriptEditor</h1>\n                <MediaController mediaUrl={this.props.mediaUrl} />\n                <TimedTextEditor transcriptData={this.props.transcriptData}/>\n            </div>\n        );\n    }\n}\n\nexport default TranscriptEditor;","import React from 'react';\nimport { render } from \"react-dom\";\nimport { TranscriptEditor } from \"./lib\";\n// import kaldiTranscript from './sample-data/kaldi-transcription-20181029235300.json';\nimport kaldiTedTalkTranscript from './sample-data/KateDarling_2018S-bbc-kaldi.json';\nconst tedTalkVideoUrl = 'https://download.ted.com/talks/KateDarling_2018S-950k.mp4';\n\nconst App = () => (\n  <div style={{ width: 640, margin: \"15px auto\" }}>\n    <h1>Transcript Editor - Example usage</h1>\n    <TranscriptEditor \n      transcriptData={kaldiTedTalkTranscript} \n      mediaUrl={tedTalkVideoUrl}\n    />\n  </div>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n","/**\n * Convert BBC Kaldi json\n ```\n {\n    \"action\": \"audio-transcribe\",\n    \"retval\": {\n      \"status\": true,\n      \"wonid\": \"octo:2692ea33-d595-41d8-bfd5-aa7f2d2f89ee\",\n      \"punct\": \"There is a day. About ten years ago when  ...\",\n      \"words\": [\n        {\n          \"start\": 13.02,\n          \"confidence\": 0.68,\n          \"end\": 13.17,\n          \"word\": \"there\",\n          \"punct\": \"There\",\n          \"index\": 0\n        },\n        {\n          \"start\": 13.17,\n          \"confidence\": 0.61,\n          \"end\": 13.38,\n          \"word\": \"is\",\n          \"punct\": \"is\",\n          \"index\": 1\n        },\n```\n * \n * into \n * \n ```\n const blocks = [\n        {\n            text: 'Hello',\n            type: 'paragraph',\n            data: {\n            speaker: 'Foo',\n            },\n            entityRanges: [],\n        },\n        {\n            text: 'World',\n            type: 'paragraph',\n            data: {\n            speaker: 'Bar',\n            },\n            entityRanges: [],\n        },\n        ];\n```\n * \n */\n\n\nfunction bbcKaldiToDraft(bbcKaldiJson){\n    let results = [];\n   let wordsByParagraphs = groupWordsInParagraphs(bbcKaldiJson.retval.words);\n   wordsByParagraphs.forEach((paragraph)=>{\n        let draftJsContentBlockParagraph = {\n            text: paragraph.text.join(' '),\n            type: 'paragraph',\n            data: {\n            speaker: 'TBC',\n            },\n            entityRanges: []\n        }\n        results.push(draftJsContentBlockParagraph);\n    })\n\n\n    return results;\n}\n\n/**\n * groups words list from kaldi transcript based on punctuation.\n * @todo To be more accurate, should introduce an honorifics library to do the splitting of the words.\n * @param {array} words - array of words opbjects from kaldi transcript\n */ \nfunction groupWordsInParagraphs(words){\n    let results = [];\n    let paragraph = {words:[], text:[]};\n    words.forEach((word) => {\n        // if word contains punctuation\n        if(/[.?!]/.test(word.punct)){\n            paragraph.words.push(word);\n            paragraph.text.push(word.punct);\n            results.push(paragraph);\n            // reset paragraph \n            paragraph = {words:[], text:[]};\n        }else{\n            paragraph.words.push(word);\n            paragraph.text.push(word.punct);\n        }\n    });\n    return results\n}\n\n module.exports = bbcKaldiToDraft;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"videoSection\":\"MediaPreview_videoSection__1m8g7\"};"],"sourceRoot":""}